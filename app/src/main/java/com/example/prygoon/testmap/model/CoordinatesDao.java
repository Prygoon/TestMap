package com.example.prygoon.testmap.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COORDINATES".
*/
public class CoordinatesDao extends AbstractDao<Coordinates, Long> {

    public static final String TABLENAME = "COORDINATES";

    /**
     * Properties of entity Coordinates.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Latitude = new Property(1, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(2, double.class, "longitude", false, "LONGITUDE");
        public final static Property UserId = new Property(3, long.class, "userId", false, "USER_ID");
    }

    private DaoSession daoSession;

    private Query<Coordinates> user_CoordinatesQuery;

    public CoordinatesDao(DaoConfig config) {
        super(config);
    }
    
    public CoordinatesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COORDINATES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LATITUDE\" REAL NOT NULL ," + // 1: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 2: longitude
                "\"USER_ID\" INTEGER NOT NULL );"); // 3: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COORDINATES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Coordinates entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getLatitude());
        stmt.bindDouble(3, entity.getLongitude());
        stmt.bindLong(4, entity.getUserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Coordinates entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getLatitude());
        stmt.bindDouble(3, entity.getLongitude());
        stmt.bindLong(4, entity.getUserId());
    }

    @Override
    protected final void attachEntity(Coordinates entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Coordinates readEntity(Cursor cursor, int offset) {
        Coordinates entity = new Coordinates( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getDouble(offset + 1), // latitude
            cursor.getDouble(offset + 2), // longitude
            cursor.getLong(offset + 3) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Coordinates entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLatitude(cursor.getDouble(offset + 1));
        entity.setLongitude(cursor.getDouble(offset + 2));
        entity.setUserId(cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Coordinates entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Coordinates entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Coordinates entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "coordinates" to-many relationship of User. */
    public List<Coordinates> _queryUser_Coordinates(long userId) {
        synchronized (this) {
            if (user_CoordinatesQuery == null) {
                QueryBuilder<Coordinates> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_CoordinatesQuery = queryBuilder.build();
            }
        }
        Query<Coordinates> query = user_CoordinatesQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
